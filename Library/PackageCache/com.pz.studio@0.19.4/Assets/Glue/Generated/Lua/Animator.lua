--!AddComponentMenu("")

-- Animator
type Animator =
{
    angularVelocity: Vector3,
    avatarRoot: Transform,
    deltaPosition: Vector3,
    deltaRotation: Quaternion,
    gravityWeight: number,
    hasBoundPlayables: boolean,
    hasRootMotion: boolean,
    hasTransformHierarchy: boolean,
    humanScale: number,
    isHuman: boolean,
    isInitialized: boolean,
    isMatchingTarget: boolean,
    isOptimizable: boolean,
    layerCount: number,
    leftFeetBottomHeight: number,
    parameterCount: number,
    pivotPosition: Vector3,
    pivotWeight: number,
    rightFeetBottomHeight: number,
    targetPosition: Vector3,
    targetRotation: Quaternion,
    velocity: Vector3,
    applyRootMotion: boolean,
    bodyPosition: Vector3,
    bodyRotation: Quaternion,
    feetPivotActive: number,
    fireEvents: boolean,
    keepAnimatorStateOnDisable: boolean,
    layersAffectMassCenter: boolean,
    logWarnings: boolean,
    playbackTime: number,
    recorderStartTime: number,
    recorderStopTime: number,
    rootPosition: Vector3,
    rootRotation: Quaternion,
    speed: number,
    stabilizeFeet: boolean,
    writeDefaultValuesOnDisable: boolean,
    ApplyBuiltinRootMotion: () -> (),
    CrossFade: (stateHashName: number , normalizedTransitionDuration: number) -> (),
    CrossFade: (stateHashName: number , normalizedTransitionDuration: number , layer: number) -> (),
    CrossFade: (stateHashName: number , normalizedTransitionDuration: number , layer: number , normalizedTimeOffset: number) -> (),
    CrossFade: (stateHashName: number , normalizedTransitionDuration: number , layer: number , normalizedTimeOffset: number , normalizedTransitionTime: number) -> (),
    CrossFade: (stateName: string , normalizedTransitionDuration: number) -> (),
    CrossFade: (stateName: string , normalizedTransitionDuration: number , layer: number) -> (),
    CrossFade: (stateName: string , normalizedTransitionDuration: number , layer: number , normalizedTimeOffset: number) -> (),
    CrossFade: (stateName: string , normalizedTransitionDuration: number , layer: number , normalizedTimeOffset: number , normalizedTransitionTime: number) -> (),
    CrossFadeInFixedTime: (stateHashName: number , fixedTransitionDuration: number) -> (),
    CrossFadeInFixedTime: (stateHashName: number , fixedTransitionDuration: number , layer: number) -> (),
    CrossFadeInFixedTime: (stateHashName: number , fixedTransitionDuration: number , layer: number , fixedTimeOffset: number) -> (),
    CrossFadeInFixedTime: (stateHashName: number , fixedTransitionDuration: number , layer: number , fixedTimeOffset: number , normalizedTransitionTime: number) -> (),
    CrossFadeInFixedTime: (stateName: string , fixedTransitionDuration: number) -> (),
    CrossFadeInFixedTime: (stateName: string , fixedTransitionDuration: number , layer: number) -> (),
    CrossFadeInFixedTime: (stateName: string , fixedTransitionDuration: number , layer: number , fixedTimeOffset: number) -> (),
    CrossFadeInFixedTime: (stateName: string , fixedTransitionDuration: number , layer: number , fixedTimeOffset: number , normalizedTransitionTime: number) -> (),
    GetBool: (id: number) -> boolean,
    GetBool: (name: string) -> boolean,
    GetCurrentAnimatorClipInfoCount: (layerIndex: number) -> number,
    GetCurrentAnimatorStateInfo: (layerIndex: number) -> AnimatorStateInfo,
    GetFloat: (id: number) -> number,
    GetFloat: (name: string) -> number,
    GetInteger: (id: number) -> number,
    GetInteger: (name: string) -> number,
    GetLayerIndex: (layerName: string) -> number,
    GetLayerName: (layerIndex: number) -> string,
    GetLayerWeight: (layerIndex: number) -> number,
    GetNextAnimatorClipInfoCount: (layerIndex: number) -> number,
    GetNextAnimatorStateInfo: (layerIndex: number) -> AnimatorStateInfo,
    HasState: (layerIndex: number , stateID: number) -> boolean,
    InterruptMatchTarget: () -> (),
    InterruptMatchTarget: (completeMatch: boolean) -> (),
    IsInTransition: (layerIndex: number) -> boolean,
    IsParameterControlledByCurve: (id: number) -> boolean,
    IsParameterControlledByCurve: (name: string) -> boolean,
    Play: (stateNameHash: number) -> (),
    Play: (stateNameHash: number , layer: number) -> (),
    Play: (stateNameHash: number , layer: number , normalizedTime: number) -> (),
    Play: (stateName: string) -> (),
    Play: (stateName: string , layer: number) -> (),
    Play: (stateName: string , layer: number , normalizedTime: number) -> (),
    PlayInFixedTime: (stateNameHash: number) -> (),
    PlayInFixedTime: (stateNameHash: number , layer: number) -> (),
    PlayInFixedTime: (stateNameHash: number , layer: number , fixedTime: number) -> (),
    PlayInFixedTime: (stateName: string) -> (),
    PlayInFixedTime: (stateName: string , layer: number) -> (),
    PlayInFixedTime: (stateName: string , layer: number , fixedTime: number) -> (),
    Rebind: () -> (),
    ResetTrigger: (id: number) -> (),
    ResetTrigger: (name: string) -> (),
    SetBool: (id: number , value: boolean) -> (),
    SetBool: (name: string , value: boolean) -> (),
    SetFloat: (id: number , value: number) -> (),
    SetFloat: (id: number , value: number , dampTime: number , deltaTime: number) -> (),
    SetFloat: (name: string , value: number) -> (),
    SetFloat: (name: string , value: number , dampTime: number , deltaTime: number) -> (),
    SetInteger: (id: number , value: number) -> (),
    SetInteger: (name: string , value: number) -> (),
    SetLayerWeight: (layerIndex: number , weight: number) -> (),
    SetLookAtPosition: (lookAtPosition: Vector3) -> (),
    SetLookAtWeight: (weight: number) -> (),
    SetLookAtWeight: (weight: number , bodyWeight: number) -> (),
    SetLookAtWeight: (weight: number , bodyWeight: number , headWeight: number) -> (),
    SetLookAtWeight: (weight: number , bodyWeight: number , headWeight: number , eyesWeight: number) -> (),
    SetLookAtWeight: (weight: number , bodyWeight: number , headWeight: number , eyesWeight: number , clampWeight: number) -> (),
    SetTrigger: (id: number) -> (),
    SetTrigger: (name: string) -> (),
    StartPlayback: () -> (),
    StartRecording: (frameCount: number) -> (),
    StopPlayback: () -> (),
    StopRecording: () -> (),
    Update: (deltaTime: number) -> (),
    WriteDefaultValues: () -> (),
}

-- AnimatorType
type AnimatorType =
{
    StringToHash: (name: string) -> number,
    __tostring: () -> string,
}

if not _G.Animator then
    local AnimatorType_instance : AnimatorType = {}
    _G.Animator = AnimatorType_instance;
end

--!AddComponentMenu("")

-- Camera
type Camera =
{
    cameraToWorldMatrix: Matrix4x4,
    pixelHeight: number,
    pixelWidth: number,
    previousViewProjectionMatrix: Matrix4x4,
    scaledPixelHeight: number,
    scaledPixelWidth: number,
    velocity: Vector3,
    allowDynamicResolution: boolean,
    allowHDR: boolean,
    allowMSAA: boolean,
    anamorphism: number,
    aperture: number,
    aspect: number,
    backgroundColor: Color,
    barrelClipping: number,
    bladeCount: number,
    clearStencilAfterLightingPass: boolean,
    cullingMask: number,
    cullingMatrix: Matrix4x4,
    curvature: Vector2,
    depth: number,
    eventMask: number,
    farClipPlane: number,
    fieldOfView: number,
    focalLength: number,
    focusDistance: number,
    forceIntoRenderTexture: boolean,
    iso: number,
    layerCullSpherical: boolean,
    lensShift: Vector2,
    nearClipPlane: number,
    nonJitteredProjectionMatrix: Matrix4x4,
    orthographic: boolean,
    orthographicSize: number,
    overrideSceneCullingMask: number,
    pixelRect: Rect,
    projectionMatrix: Matrix4x4,
    rect: Rect,
    sensorSize: Vector2,
    shutterSpeed: number,
    transparencySortAxis: Vector3,
    useJitteredProjectionMatrixForTransparentRendering: boolean,
    useOcclusionCulling: boolean,
    usePhysicalProperties: boolean,
    worldToCameraMatrix: Matrix4x4,
    CalculateObliqueMatrix: (clipPlane: Vector4) -> Matrix4x4,
    CopyFrom: (other: Camera) -> (),
    GetGateFittedFieldOfView: () -> number,
    GetGateFittedLensShift: () -> Vector2,
    Render: () -> (),
    RenderWithShader: (shader: Shader , replacementTag: string) -> (),
    Reset: () -> (),
    ResetAspect: () -> (),
    ResetCullingMatrix: () -> (),
    ResetProjectionMatrix: () -> (),
    ResetReplacementShader: () -> (),
    ResetTransparencySortSettings: () -> (),
    ResetWorldToCameraMatrix: () -> (),
    ScreenPointToRay: (point: Vector2) -> Ray,
    ScreenPointToRay: (point: Vector3) -> Ray,
    ScreenToViewportPoint: (position: Vector3) -> Vector3,
    ScreenToWorldPoint: (point: Vector3) -> Vector3,
    SetReplacementShader: (shader: Shader , replacementTag: string) -> (),
    ViewportPointToRay: (pos: Vector3) -> Ray,
    ViewportToScreenPoint: (position: Vector3) -> Vector3,
    ViewportToWorldPoint: (position: Vector3) -> Vector3,
    WorldToScreenPoint: (point: Vector3) -> Vector3,
    WorldToViewportPoint: (position: Vector3) -> Vector3,
}

-- CameraType
type CameraType =
{
    kMaxAperture: number,
    kMaxBladeCount: number,
    kMinAperture: number,
    kMinBladeCount: number,
    allCameras: {Camera},
    allCamerasCount: number,
    current: Camera,
    main: Camera,
    CalculateProjectionMatrixFromPhysicalProperties: (focalLength: number, sensorSize: Vector2, lensShift: Vector2, nearClip: number, farClip: number) -> Matrix4x4,
    FieldOfViewToFocalLength: (fieldOfView: number, sensorSize: number) -> number,
    FocalLengthToFieldOfView: (focalLength: number, sensorSize: number) -> number,
    HorizontalToVerticalFieldOfView: (horizontalFieldOfView: number, aspectRatio: number) -> number,
    VerticalToHorizontalFieldOfView: (verticalFieldOfView: number, aspectRatio: number) -> number,
    __tostring: () -> string,
}

if not _G.Camera then
    local CameraType_instance : CameraType = {}
    _G.Camera = CameraType_instance;
end

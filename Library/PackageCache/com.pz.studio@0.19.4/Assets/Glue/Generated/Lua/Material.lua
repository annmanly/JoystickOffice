--!AddComponentMenu("")

-- Material
type Material =
{
    passCount: number,
    color: Color,
    doubleSidedGI: boolean,
    enableInstancing: boolean,
    mainTexture: Texture,
    mainTextureOffset: Vector2,
    mainTextureScale: Vector2,
    renderQueue: number,
    shader: Shader,
    shaderKeywords: {string},
    ComputeCRC: () -> number,
    CopyMatchingPropertiesFromMaterial: (mat: Material) -> (),
    CopyPropertiesFromMaterial: (mat: Material) -> (),
    FindPass: (passName: string) -> number,
    GetColor: (nameID: number) -> Color,
    GetColor: (name: string) -> Color,
    GetColorArray: (nameID: number) -> {Color},
    GetColorArray: (name: string) -> {Color},
    GetFloat: (nameID: number) -> number,
    GetFloat: (name: string) -> number,
    GetFloatArray: (nameID: number) -> {number},
    GetFloatArray: (name: string) -> {number},
    GetInt: (nameID: number) -> number,
    GetInt: (name: string) -> number,
    GetInteger: (nameID: number) -> number,
    GetInteger: (name: string) -> number,
    GetMatrix: (nameID: number) -> Matrix4x4,
    GetMatrix: (name: string) -> Matrix4x4,
    GetMatrixArray: (nameID: number) -> {Matrix4x4},
    GetMatrixArray: (name: string) -> {Matrix4x4},
    GetPassName: (pass: number) -> string,
    GetShaderPassEnabled: (passName: string) -> boolean,
    GetTag: (tag: string , searchFallbacks: boolean) -> string,
    GetTag: (tag: string , searchFallbacks: boolean , defaultValue: string) -> string,
    GetTexture: (nameID: number) -> Texture,
    GetTexture: (name: string) -> Texture,
    GetTextureOffset: (nameID: number) -> Vector2,
    GetTextureOffset: (name: string) -> Vector2,
    GetTexturePropertyNameIDs: () -> {number},
    GetTexturePropertyNames: () -> {string},
    GetTextureScale: (nameID: number) -> Vector2,
    GetTextureScale: (name: string) -> Vector2,
    GetVector: (nameID: number) -> Vector4,
    GetVector: (name: string) -> Vector4,
    GetVectorArray: (nameID: number) -> {Vector4},
    GetVectorArray: (name: string) -> {Vector4},
    HasBuffer: (nameID: number) -> boolean,
    HasBuffer: (name: string) -> boolean,
    HasColor: (nameID: number) -> boolean,
    HasColor: (name: string) -> boolean,
    HasConstantBuffer: (nameID: number) -> boolean,
    HasConstantBuffer: (name: string) -> boolean,
    HasFloat: (nameID: number) -> boolean,
    HasFloat: (name: string) -> boolean,
    HasInt: (nameID: number) -> boolean,
    HasInt: (name: string) -> boolean,
    HasInteger: (nameID: number) -> boolean,
    HasInteger: (name: string) -> boolean,
    HasMatrix: (nameID: number) -> boolean,
    HasMatrix: (name: string) -> boolean,
    HasProperty: (nameID: number) -> boolean,
    HasProperty: (name: string) -> boolean,
    HasTexture: (nameID: number) -> boolean,
    HasTexture: (name: string) -> boolean,
    HasVector: (nameID: number) -> boolean,
    HasVector: (name: string) -> boolean,
    Lerp: (start: Material , _end: Material , t: number) -> (),
    SetColor: (nameID: number , value: Color) -> (),
    SetColor: (name: string , value: Color) -> (),
    SetColorArray: (nameID: number , values: {Color}) -> (),
    SetColorArray: (name: string , values: {Color}) -> (),
    SetFloat: (nameID: number , value: number) -> (),
    SetFloat: (name: string , value: number) -> (),
    SetFloatArray: (nameID: number , values: {number}) -> (),
    SetFloatArray: (name: string , values: {number}) -> (),
    SetInt: (nameID: number , value: number) -> (),
    SetInt: (name: string , value: number) -> (),
    SetInteger: (nameID: number , value: number) -> (),
    SetInteger: (name: string , value: number) -> (),
    SetMatrix: (nameID: number , value: Matrix4x4) -> (),
    SetMatrix: (name: string , value: Matrix4x4) -> (),
    SetMatrixArray: (nameID: number , values: {Matrix4x4}) -> (),
    SetMatrixArray: (name: string , values: {Matrix4x4}) -> (),
    SetOverrideTag: (tag: string , val: string) -> (),
    SetPass: (pass: number) -> boolean,
    SetShaderPassEnabled: (passName: string , enabled: boolean) -> (),
    SetTexture: (nameID: number , value: Texture) -> (),
    SetTexture: (name: string , value: Texture) -> (),
    SetTextureOffset: (nameID: number , value: Vector2) -> (),
    SetTextureOffset: (name: string , value: Vector2) -> (),
    SetTextureScale: (nameID: number , value: Vector2) -> (),
    SetTextureScale: (name: string , value: Vector2) -> (),
    SetVector: (nameID: number , value: Vector4) -> (),
    SetVector: (name: string , value: Vector4) -> (),
    SetVectorArray: (nameID: number , values: {Vector4}) -> (),
    SetVectorArray: (name: string , values: {Vector4}) -> (),
}

-- MaterialType
type MaterialType =
{
    new: (source: Material) -> Material,
    new: (shader: Shader) -> Material,
    __tostring: () -> string,
}

if not _G.Material then
    local MaterialType_instance : MaterialType = {}
    _G.Material = MaterialType_instance;
end

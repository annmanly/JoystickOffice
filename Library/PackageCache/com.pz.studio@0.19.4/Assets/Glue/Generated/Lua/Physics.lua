--!AddComponentMenu("")

-- Physics
type Physics =
{
}

-- PhysicsType
type PhysicsType =
{
    allLayers: number,
    defaultRaycastLayers: number,
    ignoreRaycastLayer: number,
    autoSyncTransforms: boolean,
    bounceThreshold: number,
    clothGravity: Vector3,
    defaultContactOffset: number,
    defaultMaxAngularSpeed: number,
    defaultMaxDepenetrationVelocity: number,
    defaultSolverIterations: number,
    defaultSolverVelocityIterations: number,
    gravity: Vector3,
    improvedPatchFriction: boolean,
    interCollisionDistance: number,
    interCollisionSettingsToggle: boolean,
    interCollisionStiffness: number,
    invokeCollisionCallbacks: boolean,
    queriesHitBackfaces: boolean,
    queriesHitTriggers: boolean,
    reuseCollisionCallbacks: boolean,
    sleepThreshold: number,
    BakeMesh: (meshID: number, convex: boolean) -> (),
    BoxCast: (center: Vector3, halfExtents: Vector3, direction: Vector3) -> (boolean , RaycastHit),
    BoxCast: (center: Vector3, halfExtents: Vector3, direction: Vector3, orientation: Quaternion) -> (boolean , RaycastHit),
    BoxCast: (center: Vector3, halfExtents: Vector3, direction: Vector3, orientation: Quaternion, maxDistance: number) -> (boolean , RaycastHit),
    BoxCast: (center: Vector3, halfExtents: Vector3, direction: Vector3, orientation: Quaternion, maxDistance: number, layerMask: number) -> (boolean , RaycastHit),
    BoxCastAll: (center: Vector3, halfExtents: Vector3, direction: Vector3) -> {RaycastHit},
    BoxCastAll: (center: Vector3, halfExtents: Vector3, direction: Vector3, orientation: Quaternion) -> {RaycastHit},
    BoxCastAll: (center: Vector3, halfExtents: Vector3, direction: Vector3, orientation: Quaternion, maxDistance: number) -> {RaycastHit},
    BoxCastAll: (center: Vector3, halfExtents: Vector3, direction: Vector3, orientation: Quaternion, maxDistance: number, layerMask: number) -> {RaycastHit},
    CapsuleCast: (point1: Vector3, point2: Vector3, radius: number, direction: Vector3) -> (boolean , RaycastHit),
    CapsuleCast: (point1: Vector3, point2: Vector3, radius: number, direction: Vector3, maxDistance: number) -> (boolean , RaycastHit),
    CapsuleCast: (point1: Vector3, point2: Vector3, radius: number, direction: Vector3, maxDistance: number, layerMask: number) -> (boolean , RaycastHit),
    CapsuleCastAll: (point1: Vector3, point2: Vector3, radius: number, direction: Vector3) -> {RaycastHit},
    CapsuleCastAll: (point1: Vector3, point2: Vector3, radius: number, direction: Vector3, maxDistance: number) -> {RaycastHit},
    CapsuleCastAll: (point1: Vector3, point2: Vector3, radius: number, direction: Vector3, maxDistance: number, layerMask: number) -> {RaycastHit},
    CheckBox: (center: Vector3, halfExtents: Vector3) -> boolean,
    CheckBox: (center: Vector3, halfExtents: Vector3, orientation: Quaternion) -> boolean,
    CheckBox: (center: Vector3, halfExtents: Vector3, orientation: Quaternion, layerMask: number) -> boolean,
    CheckCapsule: (start: Vector3, _end: Vector3, radius: number) -> boolean,
    CheckCapsule: (start: Vector3, _end: Vector3, radius: number, layerMask: number) -> boolean,
    CheckSphere: (position: Vector3, radius: number) -> boolean,
    CheckSphere: (position: Vector3, radius: number, layerMask: number) -> boolean,
    ClosestPoint: (point: Vector3, collider: Collider, position: Vector3, rotation: Quaternion) -> Vector3,
    ComputePenetration: (colliderA: Collider, positionA: Vector3, rotationA: Quaternion, colliderB: Collider, positionB: Vector3, rotationB: Quaternion) -> (boolean , Vector3 , number),
    GetIgnoreCollision: (collider1: Collider, collider2: Collider) -> boolean,
    GetIgnoreLayerCollision: (layer1: number, layer2: number) -> boolean,
    IgnoreCollision: (collider1: Collider, collider2: Collider) -> (),
    IgnoreCollision: (collider1: Collider, collider2: Collider, ignore: boolean) -> (),
    IgnoreLayerCollision: (layer1: number, layer2: number) -> (),
    IgnoreLayerCollision: (layer1: number, layer2: number, ignore: boolean) -> (),
    Linecast: (start: Vector3, _end: Vector3) -> (boolean , RaycastHit),
    Linecast: (start: Vector3, _end: Vector3, layerMask: number) -> (boolean , RaycastHit),
    OverlapBox: (center: Vector3, halfExtents: Vector3) -> {Collider},
    OverlapBox: (center: Vector3, halfExtents: Vector3, orientation: Quaternion) -> {Collider},
    OverlapBox: (center: Vector3, halfExtents: Vector3, orientation: Quaternion, layerMask: number) -> {Collider},
    OverlapCapsule: (point0: Vector3, point1: Vector3, radius: number) -> {Collider},
    OverlapCapsule: (point0: Vector3, point1: Vector3, radius: number, layerMask: number) -> {Collider},
    OverlapSphere: (position: Vector3, radius: number) -> {Collider},
    OverlapSphere: (position: Vector3, radius: number, layerMask: number) -> {Collider},
    Raycast: (ray: Ray) -> (boolean , RaycastHit),
    Raycast: (ray: Ray, maxDistance: number) -> (boolean , RaycastHit),
    Raycast: (ray: Ray, maxDistance: number, layerMask: number) -> (boolean , RaycastHit),
    Raycast: (origin: Vector3, direction: Vector3) -> (boolean , RaycastHit),
    Raycast: (origin: Vector3, direction: Vector3, maxDistance: number) -> (boolean , RaycastHit),
    Raycast: (origin: Vector3, direction: Vector3, maxDistance: number, layerMask: number) -> (boolean , RaycastHit),
    RaycastAll: (ray: Ray) -> {RaycastHit},
    RaycastAll: (ray: Ray, maxDistance: number) -> {RaycastHit},
    RaycastAll: (ray: Ray, maxDistance: number, layerMask: number) -> {RaycastHit},
    RaycastAll: (origin: Vector3, direction: Vector3) -> {RaycastHit},
    RaycastAll: (origin: Vector3, direction: Vector3, maxDistance: number) -> {RaycastHit},
    RaycastAll: (origin: Vector3, direction: Vector3, maxDistance: number, layerMask: number) -> {RaycastHit},
    Simulate: (step: number) -> (),
    SphereCast: (ray: Ray, radius: number) -> (boolean , RaycastHit),
    SphereCast: (ray: Ray, radius: number, maxDistance: number) -> (boolean , RaycastHit),
    SphereCast: (ray: Ray, radius: number, maxDistance: number, layerMask: number) -> (boolean , RaycastHit),
    SphereCast: (origin: Vector3, radius: number, direction: Vector3) -> (boolean , RaycastHit),
    SphereCast: (origin: Vector3, radius: number, direction: Vector3, maxDistance: number) -> (boolean , RaycastHit),
    SphereCast: (origin: Vector3, radius: number, direction: Vector3, maxDistance: number, layerMask: number) -> (boolean , RaycastHit),
    SphereCastAll: (ray: Ray, radius: number) -> {RaycastHit},
    SphereCastAll: (ray: Ray, radius: number, maxDistance: number) -> {RaycastHit},
    SphereCastAll: (ray: Ray, radius: number, maxDistance: number, layerMask: number) -> {RaycastHit},
    SphereCastAll: (origin: Vector3, radius: number, direction: Vector3) -> {RaycastHit},
    SphereCastAll: (origin: Vector3, radius: number, direction: Vector3, maxDistance: number) -> {RaycastHit},
    SphereCastAll: (origin: Vector3, radius: number, direction: Vector3, maxDistance: number, layerMask: number) -> {RaycastHit},
    SyncTransforms: () -> (),
    __tostring: () -> string,
}

if not _G.Physics then
    local PhysicsType_instance : PhysicsType = {}
    _G.Physics = PhysicsType_instance;
end
